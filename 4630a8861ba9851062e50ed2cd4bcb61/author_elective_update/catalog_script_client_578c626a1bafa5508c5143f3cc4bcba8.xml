<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="catalog_script_client">
    <catalog_script_client action="DELETE">
        <active>false</active>
        <applies_catalog>true</applies_catalog>
        <applies_extended>false</applies_extended>
        <applies_req_item>false</applies_req_item>
        <applies_sc_task>false</applies_sc_task>
        <applies_target_record>false</applies_target_record>
        <applies_to>set</applies_to>
        <cat_item/>
        <cat_variable/>
        <condition/>
        <description/>
        <field/>
        <global>true</global>
        <isolate_script>false</isolate_script>
        <messages/>
        <name>Validate Cart On Submit</name>
        <order>0</order>
        <script><![CDATA[// Function that executes upon form submission
function onSubmit() {
    // Retrieve the form's variables
    var formVariables = retrieveFormVariables();

    var ga = new GlideAjax('global.CartItemVariables');
    ga.addParam('sysparm_name', 'ajaxFunction_getVariablesForUserCart');
    ga.addParam('sysparm_user_id', g_user.userID);
    ga.getXMLAnswer(function(response) {
        var cartItemsWithVariables = JSON.parse(response);

        var itemsWithRequiredVariables = getItemsWithRequiredVariables(cartItemsWithVariables);

        // If there are items with required variables
        if (itemsWithRequiredVariables.length > 0) {
            // Check if form values match with items
            var formMatchesItems = checkFormMatchesItems(formVariables, itemsWithRequiredVariables);

            if (!formMatchesItems) {
                // If form doesn't match items, copy form values to items
                copyFormValuesToItems(formVariables, itemsWithRequiredVariables);

                // Then call another GlideAjax function to update the cart items on the server
                var gaUpdate = new GlideAjax('global.CartItemVariables');
                gaUpdate.addParam('sysparm_name', 'ajaxFunction_updateCartItems');
                gaUpdate.addParam('sysparm_user_id', g_user.userID);
                gaUpdate.addParam('sysparm_items', JSON.stringify(itemsWithRequiredVariables));
                gaUpdate.getXMLAnswer(function(response) {
                    // Handle the response from the update operation
                    console.log(response);
                });
            }
        }
    });

    return false; // You may want to prevent the default form submission while the ajax request is processing
}

// Helper function to retrieve variables from the form
function retrieveFormVariables() {
    var formVariables = {};
    // Assuming that you have the required variables' names stored in an array
    var requiredVariables = ['location','phone_number', 'enabled', 'address_2', 'chargeback_and_configuration', 'company', 'city', 'address_1', 'state', 'zip_code', 'location_incorrect_or_not_found', 'requested_for'];

    requiredVariables.forEach(function(variableName) {
        formVariables[variableName] = g_form.getValue(variableName);
    });

    return formVariables;
}

// Helper function to filter cart items with required variables
function getItemsWithRequiredVariables(cartItemsWithVariables) {
    var requiredVariables = ['location','phone_number', 'enabled', 'address_2', 'chargeback_and_configuration', 'company', 'city', 'address_1', 'state', 'zip_code', 'location_incorrect_or_not_found', 'requested_for'];

    return cartItemsWithVariables.filter(function(item) {
        var itemVariableNames = item.variables.map(function(variable) {
            return variable.name;
        });
        return requiredVariables.every(function(requiredVariable) {
            return itemVariableNames.includes(requiredVariable);
        });
    });
}

// Helper function to check if form values match with items in the cart
function checkFormMatchesItems(formVariables, itemsWithRequiredVariables) {
    var referenceItem = itemsWithRequiredVariables[0];
    return Object.keys(formVariables).every(function(variableName) {
        return formVariables[variableName] === referenceItem.variables.find(function(variable) {
            return variable.name === variableName;
        }).value;
    });
}

// Helper function to copy form values to items in the cart
function copyFormValuesToItems(formVariables, itemsWithRequiredVariables) {
    itemsWithRequiredVariables.forEach(function(item) {
        item.variables.forEach(function(variable) {
            if (formVariables.hasOwnProperty(variable.name)) {
                variable.value = formVariables[variable.name];
            }
        });
    });
}
]]></script>
        <sys_class_name>catalog_script_client</sys_class_name>
        <sys_created_by>Terry.Lillo</sys_created_by>
        <sys_created_on>2023-06-23 18:44:34</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>578c626a1bafa5508c5143f3cc4bcba8</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>Validate Cart On Submit</sys_name>
        <sys_overrides/>
        <sys_package display_value="CDW Ordering Integration" source="4630a8861ba9851062e50ed2cd4bcb61">4630a8861ba9851062e50ed2cd4bcb61</sys_package>
        <sys_policy/>
        <sys_scope display_value="CDW Ordering Integration">4630a8861ba9851062e50ed2cd4bcb61</sys_scope>
        <sys_update_name>catalog_script_client_578c626a1bafa5508c5143f3cc4bcba8</sys_update_name>
        <sys_updated_by>Terry.Lillo</sys_updated_by>
        <sys_updated_on>2023-06-23 18:48:00</sys_updated_on>
        <table/>
        <type>onSubmit</type>
        <ui_type>10</ui_type>
        <variable_set display_value="Delivery Information">7eadc3b71b926d508c5143f3cc4bcb57</variable_set>
        <view/>
    </catalog_script_client>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="CDW Ordering Integration">4630a8861ba9851062e50ed2cd4bcb61</application>
        <file_path/>
        <instance_id>37412023db6dd890ad8dd7c8f49619a0</instance_id>
        <instance_name>apigroupdev</instance_name>
        <name>catalog_script_client_578c626a1bafa5508c5143f3cc4bcba8</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="catalog_script_client"&gt;&lt;catalog_script_client action="INSERT_OR_UPDATE"&gt;&lt;active&gt;false&lt;/active&gt;&lt;applies_catalog&gt;true&lt;/applies_catalog&gt;&lt;applies_extended&gt;false&lt;/applies_extended&gt;&lt;applies_req_item&gt;false&lt;/applies_req_item&gt;&lt;applies_sc_task&gt;false&lt;/applies_sc_task&gt;&lt;applies_target_record&gt;false&lt;/applies_target_record&gt;&lt;applies_to&gt;set&lt;/applies_to&gt;&lt;cat_item/&gt;&lt;cat_variable/&gt;&lt;condition/&gt;&lt;description/&gt;&lt;field/&gt;&lt;global&gt;true&lt;/global&gt;&lt;isolate_script&gt;false&lt;/isolate_script&gt;&lt;messages/&gt;&lt;name&gt;Validate Cart On Submit&lt;/name&gt;&lt;order&gt;0&lt;/order&gt;&lt;script&gt;&lt;![CDATA[// Function that executes upon form submission
function onSubmit() {
    // Retrieve the form's variables
    var formVariables = retrieveFormVariables();

    var ga = new GlideAjax('global.CartItemVariables');
    ga.addParam('sysparm_name', 'ajaxFunction_getVariablesForUserCart');
    ga.addParam('sysparm_user_id', g_user.userID);
    ga.getXMLAnswer(function(response) {
        var cartItemsWithVariables = JSON.parse(response);

        var itemsWithRequiredVariables = getItemsWithRequiredVariables(cartItemsWithVariables);

        // If there are items with required variables
        if (itemsWithRequiredVariables.length &gt; 0) {
            // Check if form values match with items
            var formMatchesItems = checkFormMatchesItems(formVariables, itemsWithRequiredVariables);

            if (!formMatchesItems) {
                // If form doesn't match items, copy form values to items
                copyFormValuesToItems(formVariables, itemsWithRequiredVariables);

                // Then call another GlideAjax function to update the cart items on the server
                var gaUpdate = new GlideAjax('global.CartItemVariables');
                gaUpdate.addParam('sysparm_name', 'ajaxFunction_updateCartItems');
                gaUpdate.addParam('sysparm_user_id', g_user.userID);
                gaUpdate.addParam('sysparm_items', JSON.stringify(itemsWithRequiredVariables));
                gaUpdate.getXMLAnswer(function(response) {
                    // Handle the response from the update operation
                    console.log(response);
                });
            }
        }
    });

    return false; // You may want to prevent the default form submission while the ajax request is processing
}

// Helper function to retrieve variables from the form
function retrieveFormVariables() {
    var formVariables = {};
    // Assuming that you have the required variables' names stored in an array
    var requiredVariables = ['location','phone_number', 'enabled', 'address_2', 'chargeback_and_configuration', 'company', 'city', 'address_1', 'state', 'zip_code', 'location_incorrect_or_not_found', 'requested_for'];

    requiredVariables.forEach(function(variableName) {
        formVariables[variableName] = g_form.getValue(variableName);
    });

    return formVariables;
}

// Helper function to filter cart items with required variables
function getItemsWithRequiredVariables(cartItemsWithVariables) {
    var requiredVariables = ['location','phone_number', 'enabled', 'address_2', 'chargeback_and_configuration', 'company', 'city', 'address_1', 'state', 'zip_code', 'location_incorrect_or_not_found', 'requested_for'];

    return cartItemsWithVariables.filter(function(item) {
        var itemVariableNames = item.variables.map(function(variable) {
            return variable.name;
        });
        return requiredVariables.every(function(requiredVariable) {
            return itemVariableNames.includes(requiredVariable);
        });
    });
}

// Helper function to check if form values match with items in the cart
function checkFormMatchesItems(formVariables, itemsWithRequiredVariables) {
    var referenceItem = itemsWithRequiredVariables[0];
    return Object.keys(formVariables).every(function(variableName) {
        return formVariables[variableName] === referenceItem.variables.find(function(variable) {
            return variable.name === variableName;
        }).value;
    });
}

// Helper function to copy form values to items in the cart
function copyFormValuesToItems(formVariables, itemsWithRequiredVariables) {
    itemsWithRequiredVariables.forEach(function(item) {
        item.variables.forEach(function(variable) {
            if (formVariables.hasOwnProperty(variable.name)) {
                variable.value = formVariables[variable.name];
            }
        });
    });
}
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;catalog_script_client&lt;/sys_class_name&gt;&lt;sys_created_by&gt;Terry.Lillo&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2023-06-23 18:44:34&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;578c626a1bafa5508c5143f3cc4bcba8&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_name&gt;Validate Cart On Submit&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="CDW Ordering Integration" source="4630a8861ba9851062e50ed2cd4bcb61"&gt;4630a8861ba9851062e50ed2cd4bcb61&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="CDW Ordering Integration"&gt;4630a8861ba9851062e50ed2cd4bcb61&lt;/sys_scope&gt;&lt;sys_update_name&gt;catalog_script_client_578c626a1bafa5508c5143f3cc4bcba8&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;Terry.Lillo&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2023-06-23 18:48:00&lt;/sys_updated_on&gt;&lt;table/&gt;&lt;type&gt;onSubmit&lt;/type&gt;&lt;ui_type&gt;10&lt;/ui_type&gt;&lt;variable_set display_value="Delivery Information"&gt;7eadc3b71b926d508c5143f3cc4bcb57&lt;/variable_set&gt;&lt;view/&gt;&lt;/catalog_script_client&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-550886040</payload_hash>
        <record_name>Validate Cart On Submit</record_name>
        <reverted_from/>
        <source>9666aabc1beda1508c5143f3cc4bcb62</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>Terry.Lillo</sys_created_by>
        <sys_created_on>2023-06-23 18:48:00</sys_created_on>
        <sys_id>808de22e1bafa5508c5143f3cc4bcb05</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>188e995ab300000001</sys_recorded_at>
        <sys_updated_by>Terry.Lillo</sys_updated_by>
        <sys_updated_on>2023-06-23 18:48:00</sys_updated_on>
        <type>Catalog Client Scripts</type>
        <update_guid>848de22e51afa550207769e88fcc0704</update_guid>
        <update_guid_history>848de22e51afa550207769e88fcc0704:-550886040,0abc66ea38afa55052a93a45a631a937:-112018549</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete display_value="Validate Cart On Submit">ded3b2661befa5508c5143f3cc4bcba1</sys_audit_delete>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>Terry.Lillo</sys_created_by>
        <sys_created_on>2023-06-23 19:15:43</sys_created_on>
        <sys_db_object display_value="" name="catalog_script_client">catalog_script_client</sys_db_object>
        <sys_id>2dba2c9af25941cc8df1dca6eaf6bab9</sys_id>
        <sys_metadata>578c626a1bafa5508c5143f3cc4bcba8</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Validate Cart On Submit</sys_name>
        <sys_package display_value="CDW Ordering Integration" source="4630a8861ba9851062e50ed2cd4bcb61">4630a8861ba9851062e50ed2cd4bcb61</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="CDW Ordering Integration">4630a8861ba9851062e50ed2cd4bcb61</sys_scope>
        <sys_scope_delete display_value="">1de550a9788c4602b4836958c30c66c9</sys_scope_delete>
        <sys_update_name>catalog_script_client_578c626a1bafa5508c5143f3cc4bcba8</sys_update_name>
        <sys_update_version display_value="catalog_script_client_578c626a1bafa5508c5143f3cc4bcba8">808de22e1bafa5508c5143f3cc4bcb05</sys_update_version>
        <sys_updated_by>Terry.Lillo</sys_updated_by>
        <sys_updated_on>2023-06-23 19:15:43</sys_updated_on>
    </sys_metadata_delete>
</record_update>
