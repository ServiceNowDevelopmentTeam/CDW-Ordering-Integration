<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>sc_req_item</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="sc_req_item">cat_item.vendor=5bcd40401b2a6d508c5143f3cc4bcbb0^request.u_cdw_order=false^cat_item.flow_designer_flow=2b7e9bfc1b7634508c5143f3cc4bcbcd^EQ<item display_table="core_company" display_value="CDW" endquery="false" field="cat_item.vendor" goto="false" newquery="false" operator="=" or="false" value="5bcd40401b2a6d508c5143f3cc4bcbb0"/>
            <item endquery="false" field="request.u_cdw_order" goto="false" newquery="false" operator="=" or="false" value="false"/>
            <item display_table="sys_hub_flow" display_value="REQF - CDW RITMs - S" endquery="false" field="cat_item.flow_designer_flow" goto="false" newquery="false" operator="=" or="false" value="2b7e9bfc1b7634508c5143f3cc4bcbcd"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>CDW RITM Submitted</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	//Map fields to variables and mark required fields
	var fieldMap = [
		{ "variable" : "address_1" , "field": "delivery_address", "required": true },
		{ "variable" : "address_1" , "field": "u_address_1", "required": true },
		{ "variable" : "address_2" , "field": "u_address_2", "required": false },
		{ "variable" : "city" , "field": "u_address_city", "required": true },
		{ "variable" : "phone_number" , "field": "u_address_phone", "required": true },
		{ "variable" : "state" , "field": "u_address_state", "required": true },
		{ "variable" : "zip_code" , "field": "u_address_zip", "required": true },
		{ "variable" : "company" , "field": "u_company", "required": true },
		{ "variable" : "location" , "field": "u_location", "required": true },
		{ "variable" : "chargeback_and_configuration" , "field": "u_order_comment", "required": false }
	];
	
	//Check if all required fields are filled in
	var missingFields = [];
	for (var i = 0; i < fieldMap.length; i++) {
		if (fieldMap[i].required && !current.variables[fieldMap[i].variable]) {
			missingFields.push(fieldMap[i].variable.toString());
		}
	}
	if (missingFields.length == 0) {
		var fieldData = []
		for (var i = 0; i < fieldMap.length; i++) {
			fieldData.push({
				"field": fieldMap[i].field,
				"value": current.variables[fieldMap[i].variable].toString()
			});
		}

		var dateTimeNow = new GlideDateTime();
		dateTimeNow = dateTimeNow.getDate();
		var reqGr = new GlideRecord('sc_request');
		reqGr.get(current.request.sys_id.toString())
		if (reqGr.u_cdw_order.toString() == "false") {
			
			//For each field in field map update the request record
			for (var j = 0; j < fieldMap.length; j++) {
				reqGr.setValue([fieldMap[j].field],  current.variables[fieldMap[j].variable].toString());
			}
			reqGr.setValue("u_requested_delivery_date", dateTimeNow.toString());
			reqGr.setValue("short_description", "Hardware Order");
			reqGr.setValue("u_cdw_order", true);
			reqGr.update();

			try {
				reqGr = new GlideRecord('sc_request');
				reqGr.get(current.request.sys_id.toString());
				var inputs = {};
				inputs['current'] = reqGr;
				inputs['table_name'] = 'sc_request';
				sn_fd.FlowAPI.getRunner().flow('global.cdw_ordering_new_process').inBackground().withInputs(inputs).run();
			}
			catch (e) {
				gs.warn(e);
			}
		}
	}
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>Terry.Lillo</sys_created_by>
        <sys_created_on>2023-06-19 19:03:18</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>734a0a511b6bed108c5143f3cc4bcbc7</sys_id>
        <sys_mod_count>23</sys_mod_count>
        <sys_name>CDW RITM Submitted</sys_name>
        <sys_overrides/>
        <sys_package display_value="CDW Ordering Integration" source="4630a8861ba9851062e50ed2cd4bcb61">4630a8861ba9851062e50ed2cd4bcb61</sys_package>
        <sys_policy/>
        <sys_scope display_value="CDW Ordering Integration">4630a8861ba9851062e50ed2cd4bcb61</sys_scope>
        <sys_update_name>sys_script_734a0a511b6bed108c5143f3cc4bcbc7</sys_update_name>
        <sys_updated_by>Terry.Lillo</sys_updated_by>
        <sys_updated_on>2023-08-02 16:04:33</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=734a0a511b6bed108c5143f3cc4bcbc7"/>
</record_update>
